/*
// Author: Tom Gabrysiak
// Name:   Jigsaw Puzzle
// Date:   April 21st, 2012
*/
;
(function() {
	window.Util = {
		randint: function(e) {
			return ~~ (Math.random() * e)
		}
	};
	if (!("bind" in Function)) {
		Function.prototype.bind = function(f) {
			var e = this;
			return function() {
				return e.apply(f, arguments)
			}
		}
	}
	var d = Class.extend({
		init: function(e) {
			this.elem = document.getElementById(e)
		}
	});
	var b = ("mousemove mouseover mouseout mousedown mouseup click dblclick focus blur submit change").split(" ");
	for (var a = 0; a < b.length; a++) {
		var c = b[a];
		d.prototype[c] = function(e) {
			return function(f, g) {
				if (typeof(f) == "function") {
					this.elem.addEventListener(e, f, false)
				} else {
					this.elem.addEventListener(e, function(i) {
						var h = i.target;
						if (h.tagName.toLowerCase() == f) {
							i.stopPropagation();
							g.call(h, i)
						}
					}, false)
				}
			}
		}(c)
	}
	Util.$ = function() {
		var e = d();
		return function(f) {
			e.elem = document.getElementById(f);
			return e
		}
	}()
}());
(function() {
	var c = document.createElement("canvas").getContext("2d"),
		b = Math.abs;

	function d(f, l) {
		if (f.rotation % 360 || l.rotation % 360 || l.hide || f.hide || (f.row != l.row && f.col != l.col)) {
			return
		}
		var j = f.tx - l.tx,
			i = f.ty - l.ty,
			g = f.col - l.col,
			k = f.row - l.row,
			h = f.size;
		if (((g == -1 && j < 0 && b(j + h) < 10) || (g == 1 && j >= 0 && b(j - h) < 10)) && (i <= 10 && i >= -10)) {
			return [f.col > l.col ? -b(j) + h : b(j) - h, l.ty - f.ty]
		} else {
			if (((k == -1 && i < 0 && b(i + h) < 10) || (k == 1 && i >= 0 && b(i - h) < 10)) && (j <= 10 && j >= -10)) {
				return [l.tx - f.tx, f.row > l.row ? -b(i) + h : b(i) - h]
			}
		}
	}
	var a = Cevent.Shape.extend({
		type: "piece",
		init: function(f, k, h, i, g) {
			this._super(f, k);
			var j = i / 2;
			this.img = h;
			this.size = i;
			this.edges = g;
			this.tx = this.x + j;
			this.ty = this.y + j;
			this.x = -j;
			this.y = -j
		},
		draw_path: function(g) {
			var k = this.size,
				j, h = 0;
			g.beginPath();
			g.moveTo(this.x, this.y);
			for (; h < 4; h++) {
				j = this.edges[h];
				if (j) {
					g.lineTo(this.x + 0.4 * k, this.y);
					var f = this[j](g, k, this.x + 0.4 * k, this.y);
					g.lineTo(f + 0.4 * k, this.y)
				} else {
					g.lineTo(this.x + k, this.y)
				}
				g.rotate(Math.PI / 2)
			}
			g.closePath()
		},
		render: function(j, h, g) {
			var f = document.createElement("canvas").getContext("2d"),
				i = this.size + 0.5;
			f.canvas.width = i * 2;
			f.canvas.height = i * 2;
			f.save();
			this.applyStyle(f);
			f.lineWidth = 1.5;
			f.translate(i, i);
			this.draw_path(f);
			f.clip();
			f.drawImage(this.img, -this.tx - h, -this.ty - g);
			f.stroke();
			f.restore();
			this.tx += this.offset;
			this.img = f.canvas;
			j.redraw()
		},
		outside: function(g, j, f, k) {
			var i = j * 0.2,
				h = j * 0.3;
			g.bezierCurveTo(f - i, k - h, f, k - h, f, k -= h);
			g.bezierCurveTo(f, k, f, k, f += i, k);
			g.bezierCurveTo(f, k, f + i, k, f, k += h);
			return f
		},
		inside: function(g, j, f, k) {
			var i = j * 0.2,
				h = j * 0.3;
			g.bezierCurveTo(f - i, k + h, f, k + h, f, k += h);
			g.bezierCurveTo(f, k, f, k, f += i, k);
			g.bezierCurveTo(f, k, f + i, k, f, k -= h);
			return f
		},
		draw: function(g) {
			if (this.hide) {
				return
			}
			var f = this.size / 2 - 0.5;
			this.setTransform(g);
			g.drawImage(this.img, this.x - f, this.y - f)
		},
		check: function(f) {
			var j;
			if (f.type == "piece") {
				j = d(this, f)
			} else {
				var h, g = f.pieces.length;
				for (h = 0; h < g; h++) {
					if (j = d(this, f.pieces[h])) {
						break
					}
				}
			}
			if (j) {
				this.rmove(j[0], j[1])
			}
			return j
		},
		hitTest: function(f) {
			if (this.hide) {
				return
			}
			var g = this.size;
			c.save();
			this.setTransform(c);
			this.draw_path(c);
			c.restore();
			return c.isPointInPath(f.x, f.y)
		}
	}),
		e = Cevent.Shape.extend({
			type: "group",
			init: function() {
				this.pieces = [];
				this._super(0, 0)
			},
			draw: function(g) {
				if (this.hide) {
					return
				}
				var h, f = this.pieces.length;
				for (h = 0; h < f; h++) {
					this.pieces[h].draw(g)
				}
			},
			hitTest: function(f) {
				var h, g = this.pieces.length;
				for (h = 0; h < g; h++) {
					if (this.pieces[h].hitTest(f)) {
						return true
					}
				}
			},
			check: function(g) {
				var m, h = this.pieces.length,
					n;
				if (g.type == "piece") {
					for (m = 0; m < h; m++) {
						if (n = d(this.pieces[m], g)) {
							this.rmove(n[0], n[1]);
							return true
						}
					}
				} else {
					var k, f = g.pieces.length;
					for (m = 0; m < h; m++) {
						for (k = 0; k < f; k++) {
							if (n = d(this.pieces[m], g.pieces[k])) {
								this.rmove(n[0], n[1]);
								return true
							}
						}
					}
				}
			},
			rmove: function(f, j) {
				var h, g = this.pieces.length;
				for (h = 0; h < g; h++) {
					this.pieces[h].rmove(f, j)
				}
			},
			add: function() {
				this.pieces = this.pieces.concat.apply(this.pieces, arguments)
			}
		});
	Cevent.register("group", e);
	Cevent.register("piece", a)
}());
(function() {
	var b = "inside",
		a = "outside",
		g = null,
		c = [b, a],
		e = 0;

	function f() {
		return c[Util.randint(2)]
	}
	jigsaw = {};
	jigsaw.Jigsaw = Class.extend({
		init: function(l, k) {
			var h = new EventEmitter(),
				j = this;
			this.max_width = l || 768;
			this.max_height = k || 500;
			this.eventBus = h;
			this.ce = new Cevent("canvas", "buffer");
			this.ui = new jigsaw.UI(h);
			this.tmp_img = new Image();
			this.img = document.getElementById("image-preview");
			this.ctx = this.img.getContext("2d");
			this.parts = 10;
			this.tmp_img.onload = function() {
				j.draw_image(this);
				j.render()
			};
			d(this.ce, h);
			h.on(jigsaw.Events.PARTS_NUMBER_CHANGED, this.set_parts.bind(this));
			h.on(jigsaw.Events.RENDER_REQUEST, this.render.bind(this));
			h.on(jigsaw.Events.JIGSAW_SHUFFLE, this.shuffle.bind(this));
			h.on(jigsaw.Events.SHOW_EDGE, function() {
				j.ce.find("#middle").attr("hide", true);
				j.ce.find("#edge").attr("hide", false);
				j.ce.redraw()
			});
			h.on(jigsaw.Events.SHOW_MIDDLE, function() {
				j.ce.find("#middle").attr("hide", false);
				j.ce.find("#edge").attr("hide", true);
				j.ce.redraw()
			});
			h.on(jigsaw.Events.SHOW_ALL, function() {
				j.ce.find("*").attr("hide", false);
				j.ce.redraw()
			});

			function i() {
				var n = j.ce.cv,
					m = j.ce.buffer.canvas;
				m.width = n.width = document.documentElement.clientWidth, m.height = n.height = document.documentElement.clientHeight - 45;
				j.ce.redraw()
			}
			i();
			window.addEventListener("resize", i, false)
		},
		set_parts: function(h) {
			this.parts = h
		},
		set_image: function(h) {
			this.ce.cv.className = "loading";
			this.tmp_img.src = h
		},
		draw_image: function(k) {
			var n = this.max_width,
				j = this.max_height,
				m, h, i = this.ctx;
			if (k.width > n || k.height > j) {
				var l = Math.min(n / k.width, j / k.height);
				m = i.canvas.width = ~~ (k.width * l);
				h = i.canvas.height = ~~ (k.height * l);
				i.drawImage(k, 0, 0, k.width, k.height, 0, 0, m, h)
			} else {
				i.canvas.width = k.width;
				i.canvas.height = k.height;
				i.drawImage(k, 0, 0)
			}
		},
		clear: function() {
			this.ce._shapes = []
		},
		shuffle: function() {
			var m = this.ce.getAll("piece");
			if (!m.length) {
				if (!this.__pieces) {
					return
				} else {
					this.ce._shapes = m = this.__pieces
				}
			}
			var n, k = m.length,
				q, p = m[0].size,
				j = document.documentElement.clientWidth - p * 2,
				o = document.documentElement.clientHeight - p * 2;
			for (n = 0; n < k; n++) {
				q = m[n];
				q.tx = p + Util.randint(j) + (q.tx % 1);
				q.ty = p + Util.randint(o) + (q.tx % 1);
				q.rotation = Util.randint(4) * 90
			}
			this.ce.shuffled = true;
			this.ce.redraw()
		},
		render: function() {
			this.ce.cv.className = "";
			this.ce.shuffled = false;
			var x, z, k, n, o = [],
				v = [],
				y = this.img.width,
				s = this.img.height,
				B = ~~Math.sqrt(y * s / this.parts),
				u = ~~ (y / B),
				A = ~~ (s / B),
				r = 0,
				q = 0,
				t = ++e,
				p;
			this.flag = t;
			while (u * A < this.parts) {
				B--;
				u = ~~ (y / B);
				A = ~~ (s / B)
			}
			B = B % 2 ? B : B - 1;
			p = ~~ (document.documentElement.clientWidth / 2 - (B * u / 2));
			this.clear();
			var m = ~~ ((y - (u * B)) / 2),
				l = ~~ ((s - (A * B)) / 2);
			m = m >= 0 ? m : 0;
			l = l >= 0 ? l : 0;
			(function() {
				if (r < u && t == this.flag) {
					if (q < A) {
						x = q == 0 ? g : k == b ? a : b;
						z = r == u - 1 ? g : f();
						k = q == A - 1 ? g : f();
						n = r == 0 ? 0 : v[q] == b ? a : b;
						this.ce.piece(B * r, B * q, this.img, B, [x, z, k, n]).attr({
							col: r,
							row: q,
							offset: p
						}).get(-1).render(this.ce, m, l);
						if (q == 0 || r == 0 || r == u - 1 || q == A - 1) {
							this.ce.addId("edge")
						} else {
							this.ce.addId("middle")
						}
						o.push(z);
						q++
					} else {
						r++;
						q = 0;
						v = o;
						o = []
					}
					setTimeout(arguments.callee.bind(this), 20);
					return
				} else {
					if (this.flag == t) {
						this.__pieces = this.ce.get().slice(0);
						this.ce.redraw()
					}
				}
			}).bind(this)()
		}
	});

	function d(i, h) {
		i.drag("*", {
			end: function(p, o) {
				if (!p.shuffled) {
					return
				}
				var m = p.getAll("piece").concat(p.getAll("group")),
					k = 0,
					j = m.length,
					n = this;
				for (; k < j; k++) {
					if (m[k] === this) {
						continue
					}
					if (n.check(m[k])) {
						p.remove(n);
						p.remove(m[k]);
						p._curHover = p.group().get(-1);
						p._curHover.add(n.pieces || n, m[k].pieces || m[k]);
						n = p._curHover;
						p.focused = null
					}
				}
				if (!i.getAll("piece").length && i.getAll("group").length == 1 && i.shuffled) {
					i.shuffled = false;
					h.emit(jigsaw.Events.JIGSAW_COMPLETE)
				}
			}
		}).focus("*", function(k, j) {
			k.remove(this);
			k._shapes.push(this)
		}).keydown("right", function() {
			if (this.focused) {
				this.focused.rotation = (this.focused.rotation + 45) % 360
			}
			return false
		}).keydown("left", function() {
			if (this.focused) {
				this.focused.rotation = (this.focused.rotation - 45) % 360
			}
			return false
		});
		if (Cevent.isTouchDevice) {
			i.click("*", function(k, j) {
				if (i.focused) {
					i.focused.rotation = (i.focused.rotation + 45) % 360;
					i.redraw()
				}
			})
		}
		i.cv.addEventListener("contextmenu", function(j) {
			if (i.focused) {
				i.focused.rotation = (i.focused.rotation + 45) % 360;
				i.redraw()
			}
			j.preventDefault()
		}, false)
	}
}());
(function() {
	var c = function(d) {
			return document.getElementById(d)
		},
		b = 0;
	jigsaw.UI = Class.extend({
		init: function(d) {
			var e = this;
			this.eventBus = d;
			this.clock = c("clock");
			c("set-parts").value = 10;
			a(this, d);
			d.on(jigsaw.Events.JIGSAW_SHUFFLE, this.init_clock.bind(this));
			d.on(jigsaw.Events.SHOW_PREVIEW, this.show_preview.bind(this));
			d.on(jigsaw.Events.SHOW_HELP, this.show_help.bind(this));
			d.on(jigsaw.Events.JIGSAW_COMPLETE, function() {
				e.stop_clock();
				e.show_time()
			})
		},
		stop_clock: function() {
			b++
		},
		init_clock: function() {
			var d = this;
			this.ini = new Date().getTime();
			this.uuid = b;
			(function() {
				if (d.uuid == b) {
					var f = ~~ ((new Date().getTime() - d.ini) / 1000),
						i = f % 60,
						e = ~~ (f / 60),
						g = ~~ (e / 60);
					e %= 60;
					d.clock.innerHTML = (g > 9 ? g : "0" + g) + ":" + (e > 9 ? e : "0" + e % 60) + ":" + (i > 9 ? i : "0" + i);
					setTimeout(arguments.callee, 1000)
				}
			}())
		},
		show_preview: function() {
			var d = c("image-preview");
			d.className = d.className == "show" ? "hide" : "show";
			d.style.marginLeft = -(d.width / 2) + "px"
		},
		show_time: function() {
			this.show_modal("congrat");
			c("time").innerHTML = this.clock.innerHTML
		},
		show_modal: function(d) {
			this.current_modal = c(d);
			this.current_modal.className = "modal";
			c("overlay").className = ""
		},
		show_help: function() {
			this.show_modal("help")
		},
	});

	function a(e, d) {
		function f() {
			if (e.current_modal) {
				e.current_modal.className = "hide"
			}
			c("overlay").className = "hide"
		}
		jigsaw.UI.close_lightbox = f;
		Util.$("overlay").click(f);
		Util.$("set-parts").change(function() {
			d.emit(jigsaw.Events.PARTS_NUMBER_CHANGED, +this.value);
			d.emit(jigsaw.Events.RENDER_REQUEST)
		});
		Util.$("game-options").click("a", function(g) {
			if (jigsaw.Events[this.id]) {
				g.preventDefault();
				d.emit(jigsaw.Events[this.id])
			}
		})
	}
}());
(function() {
	jigsaw.Events = {
		PARTS_NUMBER_CHANGED: "PartsNumberChanged",
		RENDER_REQUEST: "RenderRequestEvent",
		JIGSAW_RENDERED: "JigsawRenderedEvent",
		JIGSAW_SHUFFLE: "JigsawShuffleEvent",
		SHOW_PREVIEW: "JigsawShowPreview",
		SHOW_HELP: "JigsawShowHelp",
		SHOW_EDGE: "ShowEdgeEvent",
		SHOW_MIDDLE: "ShowMiddleEvent",
		SHOW_ALL: "ShowAllEvent",
		JIGSAW_COMPLETE: "JigsawCompleteEvent",
	}
}());